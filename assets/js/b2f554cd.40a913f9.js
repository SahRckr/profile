"use strict";(self.webpackChunkprofile=self.webpackChunkprofile||[]).push([[477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"promises-polyfill","metadata":{"permalink":"/blog/promises-polyfill","source":"@site/blog/2024-01-13-promises-polyfill.md","title":"A comprehensive guide on Promise polyfills","description":"Promise, Promise.all, Promise.resolve, Promise.reject, Promise.race, Promise.allSettled","date":"2024-01-13T00:00:00.000Z","formattedDate":"January 13, 2024","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"},{"label":"polyfills","permalink":"/blog/tags/polyfills"}],"readingTime":6.915,"hasTruncateMarker":true,"authors":[{"name":"Sahil Satishkumar","url":"https://sahilsatishkumar.dev/contact","imageURL":"https://avatars1.githubusercontent.com/u/8242514"}],"frontMatter":{"slug":"promises-polyfill","title":"A comprehensive guide on Promise polyfills","description":"Promise, Promise.all, Promise.resolve, Promise.reject, Promise.race, Promise.allSettled","author":"Sahil Satishkumar","author_url":"https://sahilsatishkumar.dev/contact","author_image_url":"https://avatars1.githubusercontent.com/u/8242514","tags":["javascript","polyfills"]},"unlisted":false,"nextItem":{"title":"Welcome 2024!","permalink":"/blog/2024"}},"content":"My intention here is to write a one-stop article to summarise how one would write all the polyfills for Promise and its static methods.\\n\\n\x3c!--truncate--\x3e\\n\\n## Topics covered\\n\\n1. [`new Promise(cb)`](#new-promisecb)\\n2. [`Promise.resolve`](#promiseresolve)\\n3. [`Promise.reject`](#promisereject)\\n4. [`Promise.withResolvers`](#promisewithresolvers)\\n5. [`Promise.race`](#promiserace)\\n6. [`Promise.any`](#promiseany)\\n7. [`Promise.allSettled`](#promiseallsettled)\\n\\n### `new Promise(cb)`\\n\\nHere\'s what a typical promise syntax looks like:\\n\\n```js\\nconst transaction = new Promise((resolve, reject) => {\\n\\ttry {\\n\\t\\t...\\n\\t\\t// do something async\\n\\t\\t...\\n\\t\\tif(success) {\\n\\t\\t\\tresolve(\\"\ud83d\udcb0\ud83d\udcb0\ud83d\udcb0\\")\\n\\t\\t}\\n\\t} catch (err) {\\n\\t\\tconsole.error(err)\\n\\t\\treject(\\"Transaction failed\\")\\n\\t}\\n\\t\\n\\tif(somethingWrong){\\n\\t\\treject(\\"Transaction failed\\")\\n\\t}\\n})\\n.then(console.log) // logs \\"\ud83d\udcb0\ud83d\udcb0\ud83d\udcb0\\" if succeeds.\\n.catch(console.error) // error-logs \\"Transaction failed\\" if fails.\\n```\\n\\nfrom the syntax about, i hope it\'s pretty clear that this should be the skeleton of the polyfill class\\n\\n```js showLineNumbers\\nclass MyPromise {\\n\\tconstructor(callback){\\n\\t\\t// do something here\\n\\t\\t// pass the resolve/reject handlers to the callback\\n\\t}\\n\\t\\n\\tthen(thenHandler){\\n\\t\\t// do something with the then callback\\n\\t\\treturn this; // do not forget this\\n\\t}\\n\\t\\n\\tcatch(catchHandler){\\n\\t\\t// do something with the catch callback\\n\\t\\treturn this;\\n\\t\\t// Must if you want MyPromise to support `finally` cycle\\n\\t}\\n}\\n```\\n\\nlet\'s zoom into what is needed in the `constructor`\\n\\n```js {5-7} showLineNumbers\\nclass MyPromise {\\n\\tconstructor(callback){\\n\\t\\t// at some point we need to call the callback\\n\\t\\t// and provide it the resolve & reject handlers\\n\\t\\tfunction resolve(val) { // do something with val }\\n\\t\\tfunction reject(err) { // do something with err }\\n\\t\\tcallback(resolve, reject);\\n\\t}\\n}\\n```\\n\\nNew challenge, to complete the `resolve` and `reject` functions, we need to provide it with the `thenHandler` and the `catchHandler`. Because I\'ve already used a class notation, I can hold these in some class fields.\\n\\n```js {2,3,10,15} showLineNumbers\\nclass MyPromise {\\n\\tonResolve;\\n\\tonReject;\\n\\t\\n\\tconstructor(callback){\\n\\t\\t// same as before\\n\\t}\\n\\t\\n\\tthen(thenHandler){\\n\\t\\tthis.onResolve = thenHandler;\\n\\t\\treturn this;\\n\\t}\\n\\t\\n\\tcatch(catchHandler){\\n\\t\\tthis.onReject = catchHandler;\\n\\t\\treturn this;\\n\\t}\\n}\\n```\\n\\nThere is a connection we are missing. When we call the `onResolve` or `onReject` callbacks, we need to provide these callbacks a value, however, the value would be available only in the constructor. So we need to add two more class fields to hold those values.\\n\\n```js {4,5,9,12} showLineNumbers\\nclass MyPromise {\\n\\tonResolve;\\n\\tonReject;\\n\\tvalue;\\n\\terror;\\n\\t\\n\\tconstructor(callback){\\n\\t\\tfunction resolve(val) {\\n\\t\\t\\tthis.value = val;\\n\\t\\t}\\n\\t\\tfunction reject(err) {\\n\\t\\t\\tthis.error = err;\\n\\t\\t}\\n\\t\\tcallback(resolve, reject)\\n\\t}\\n\\t// same as before\\n}\\n```\\n\\nGuess what, we\'ve opened another can of worms, when & where do we call our `onResolve` and `onReject` callbacks? Think opportunistically, and you\'ll see you got to do this both at the constructors and member functions. Because of this, we need to also maintain a state for promise being called, rejected or resolved. Now we have all the right ingredients.\\n\\n```js {6-8,12,15-18,21,23-26,33-36,42-45} showLineNumbers\\nclass MyPromise {\\n\\tonResolve;\\n\\tonReject;\\n\\tvalue;\\n\\terror;\\n\\tisFulfilled = false;\\n\\tisRejected = false;\\n\\tisCalled = false;\\n\\t\\n\\tconstructor(callback){\\n\\t\\tfunction resolve(val) {\\n\\t\\t\\tthis.isFulfilled = true;\\n\\t\\t\\tthis.value = val;\\n\\t\\t\\t// Safety check to confirm that onResolve is set\\n\\t\\t\\tif(typeof this.onResolve === \'function\' && !this.isCalled) {\\n\\t\\t\\t\\tthis.isCalled = true;\\n\\t\\t\\t\\tthis.onResolve(val);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tfunction reject(err) {\\n\\t\\t\\tthis.isRejected = true;\\n\\t\\t\\tthis.error = err;\\n\\t\\t\\tif(typeof this.onReject === \'function\' && !this.isCalled) {\\n\\t\\t\\t\\tthis.isCalled = true;\\n\\t\\t\\t\\tthis.onReject(err);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tcallback(resolve, reject);\\n\\t}\\n\\t\\n\\tthen(thenHandler){\\n\\t\\tthis.onResolve = thenHandler;\\n\\t\\tif(!this.isCalled && this.isFulfilled) {\\n\\t\\t\\tthis.isCalled = true;\\n\\t\\t\\tthis.onResolve(this.value); // OR thenHandler(this.value)\\n\\t\\t}\\n\\t\\treturn this\\n\\t}\\n\\n\\tcatch(catchHandler){\\n\\t\\tthis.onReject = catchHandler;\\n\\t\\tif(!this.isCalled && this.isRejected) {\\n\\t\\t\\tthis.isCalled = true;\\n\\t\\t\\tthis.onReject(this.error); // OR catchHandler(this.value)\\n\\t\\t}\\n\\t\\treturn this;\\n\\t}\\n}\\n```\\n\\nSo we are done? Let\'s try running this, and we\'ll uncover 2 major issues.\\n\\n![console screenshot](../static/img/broken-promise-polyfill.png)\\n\\n1. All our internal class fields are exposed. Apart from `then` & `catch` we don\'t want anything else to be accessible. (Like in promises)\\n2. **IT\'S BROKEN!**\\n\\nI understand my priorities are not in the right order, but these are manageable issues. The extra exposed class fields can be obfuscated by using [private fields](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties).\\n\\nThe error is a very familiar one, if you\'ve ever dealt with closures or context is javascript.\\n\\n```js {6} showLineNumbers\\nclass MyPromise {\\n\\t//same as before\\n\\tconstructor(callback){\\n\\t\\tfunction resolve(val) { // same as before }\\n\\t\\tfunction reject(err) { // same as before }\\n\\t\\tcallback(resolve.bind(this), reject.bind(this))\\n\\t}\\n\\t// same as before\\n}\\n```\\n\\nWhy does this happen? the callbacks supplied to callback run in a different context. They loose the reference to `this`, hence cannot call or access any class fields they might depend upon. Another way to fix this would be to use arrow functions.\\n\\nThat\'s it. Your promise base class is now ready! \ud83e\udd73\\n\\n```js showLineNumbers\\nclass MyPromise {\\n\\t#onResolve; \\n\\t#onReject; \\n\\t#isFulfilled = false;\\n\\t#isRejected = false;\\n\\t#isCalled = false;\\n\\t#value;\\n\\t#error;\\n\\t\\n\\tconstructor(executor) {\\n\\t\\tfunction resolve(val){\\n\\t\\t\\tthis.#isFulfilled = true;\\n\\t\\t\\tthis.#value = val;\\n\\t\\t\\tif(typeof this.#onResolve === \'function\' && !this.#isCalled){\\n\\t\\t\\t\\tthis.#isCalled = true;\\n\\t\\t\\t\\tthis.#onResolve(val);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\tfunction reject(err){\\n\\t\\t\\tthis.#isRejected = true;\\n\\t\\t\\tthis.#error = err;\\n\\t\\t\\tif(typeof this.#onReject === \'function\' && !this.#isCalled){\\n\\t\\t\\t\\tthis.#isCalled = true;\\n\\t\\t\\t\\tthis.#onReject(err);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\texecutor(resolve.bind(this), reject.bind(this));\\n\\t}\\n\\n\\tthen(thenHandler){\\n\\t\\tthis.#onResolve = thenHandler;\\n\\t\\tif(!this.#isCalled && this.#isFulfilled){\\n\\t\\t\\tthis.#isCalled = true;\\n\\t\\t\\tthis.#onResolve(this.#value);\\n\\t\\t}\\n\\t\\treturn this;\\n\\t}\\n\\n\\tcatch(catchHandler) {\\n\\t\\tthis.#onReject = catchHandler;\\n\\t\\tif(!this.#isCalled && this.#isRejected){\\n\\t\\t\\tthis.#isCalled = true;\\n\\t\\t\\tthis.#onReject(this.#error);\\n\\t\\t}\\n\\t\\treturn this;\\n\\t}\\n}\\n```\\n\\nHere are some things you could try to test yourself \\n1. try to implement this yourself with `function` (i.e. without using `class`)\\n2. accomodate [`.finally`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally). (We\'ll be needing this for one of the methods)\\n\\nWith this behind us, let\'s write the polyfills for the static methods. `Promise.resolve` and `Promise.reject` are the only ones that run against a value. `Promise.all`, `Promise.race`, `Promise.allSettled` Let\'s start with the easy ones\\n\\n---\\n\\n### `Promise.resolve`\\n\\n`Promise.resolve` resolves a value to a promise.\\n\\n```js showLineNumbers\\nMyPromise.resolve = function(val) {\\n\\treturn new MyPromise(resolve => resolve(val));\\n}\\n```\\n### `Promise.reject`\\n\\n`Promise.reject` rejects a value to a promise.\\n\\n```js showLineNumbers\\nMyPromise.resolve = function(err) {\\n\\treturn new MyPromise((_, reject) => reject(err));\\n}\\n```\\n\\n### `Promise.withResolvers`\\n\\nThis method, takes no parameters, and returns an object containing `promise`, `resolve` and `reject`.\\n\\n```js showLineNumbers\\nMyPromise.withResolvers = function(){\\n\\tlet resolve, reject;\\n\\tconst promise = new MyPromise((res, rej) => {\\n\\t\\tresolve = res;\\n\\t\\treject = rej;\\n\\t});\\n\\treturn {resolve, reject, promise};\\n}\\n```\\n---\\n\\n:::info[edge case to consider remaining methods]\\nAll promise methods that accept array of promises, accept empty array as input.\\n:::\\n\\n### `Promise.race`\\n\\nThis method accepts an array of promises, returns a single promise that resolves or rejects when any one of them fulfils or rejects.\\n\\n```js showLineNumbers\\nMyPromise.race = function(promises) {\\n\\treturn new MyPromise((resolve, reject) => {\\n\\t\\tpromises.forEach(task => {\\n\\t\\t\\tMyPromise.resolve(task)\\n\\t\\t\\t\\t.then(resolve)\\n\\t\\t\\t\\t.catch(reject);\\n\\t\\t});\\n\\t});\\n}\\n```\\n---\\n:::info[edge case to consider remaining methods]\\nThe order in which promises are resolve or rejected are persisted. Because there are no guarantees of promises arriving at a done state another, you cannot create an array and push values as you resolve (or reject) to them. They have to be added at the right indexes.\\n:::\\n\\n### `Promise.all`\\n\\nThis method accepts and array of promises, returns a single promise that resolves when all promises fulfil, and fails when any one of them fails.\\n\\n```js showLineNumbers\\nMyPromise.all = function(promises) {\\n\\treturn new MyPromise((resolve, reject) => {\\n\\t\\tif(!promises.length) {\\n\\t\\t\\tresolve([]);\\n\\t\\t}\\n\\t\\tconst resolved = [];\\n\\t\\tlet resolveCount = 0;\\n\\t\\tpromises.forEach((task, idx) => {\\n\\t\\t\\tMyPromise.resolve(task)\\n\\t\\t\\t\\t.then(value => {\\n\\t\\t\\t\\t\\tresolved[idx] = value;\\n\\t\\t\\t\\t\\tresolveCount++;\\n\\t\\t\\t\\t\\tif(resolveCount === iterable.length){\\n\\t\\t\\t\\t\\t\\tresolve(resolved);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t})\\n\\t\\t\\t\\t.catch(reject);\\n\\t\\t});\\n\\t});\\n}\\n```\\n\\n### `Promise.any`\\n\\nThis method accepts an array of promises, returns a single promise that resolves with the first promise that fulfils, else rejects with an `AggregateError`.\\n\\n```js showLineNumbers\\nMyPromise.any = function(promises) {\\n\\treturn new MyPromise((resolve, reject) => {\\n\\t\\tif(!promises.length) {\\n\\t\\t\\treject(new AggregateError([]));\\n\\t\\t}\\n\\t\\tconst errors = [];\\n\\t\\tlet errorCount = 0;\\n\\t\\tpromises.forEach((task, idx) => {\\n\\t\\t\\tMyPromise.resolve(task)\\n\\t\\t\\t\\t.then(resolve)\\n\\t\\t\\t\\t.catch(error => {\\n\\t\\t\\t\\t\\terrors[idx] = error;\\n\\t\\t\\t\\t\\terrorCount++;\\n\\t\\t\\t\\t\\tif(errorCount === promises.length){\\n\\t\\t\\t\\t\\t\\treject(new AggregateError(errors));\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t});\\n\\t});\\n}\\n```\\n### `Promise.allSettled`\\n\\nThis method accepts an array of promises, and returns a promise that (always) resolves with status of each promise and value (or reason) of each of them.\\n\\n```js showLineNumbers\\n// don\'t run this without implementing `.finally` on MyPromise\\nMyPromise.allSettled = function(promises){\\n\\treturn new MyPromise(resolve => {\\n\\t\\tif(!promises.length) {\\n\\t\\t\\tresolve([]);\\n\\t\\t}\\n\\t\\tlet calledCount = 0;\\n\\t\\tconst results = [];\\n\\t\\tpromises.forEach((task, idx) => {\\n\\t\\t\\t// Use native Promise if `.finally` isn\'t implemented\\n\\t\\t\\tMyPromise.resolve(task) \\n\\t\\t\\t\\t.then(value => {\\n\\t\\t\\t\\t\\tresults[idx] = {status: \\"fulfilled\\", value};\\n\\t\\t\\t\\t})\\n\\t\\t\\t\\t.catch(reason => {\\n\\t\\t\\t\\t\\tresults[idx] = {status: \\"rejected\\", reason};\\n\\t\\t\\t\\t})\\n\\t\\t\\t\\t.finally(() => {\\n\\t\\t\\t\\t\\tcalledCount++;\\n\\t\\t\\t\\t\\tif(calledCount === promises.length){\\n\\t\\t\\t\\t\\t\\tresolve(results);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t});\\n\\t});\\n}\\n```\\n\\n---\\n\\n## Resources\\n\\n- [Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\n- [class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)\\n\\t- [private properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties)\\n\\t- [public properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields)\\n- [AggregateError](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError)\\n\\nThat about it!"},{"id":"2024","metadata":{"permalink":"/blog/2024","source":"@site/blog/2024-01-01-welcome-2024.md","title":"Welcome 2024!","description":"Revive Blog.","date":"2024-01-01T00:00:00.000Z","formattedDate":"January 1, 2024","tags":[{"label":"personal","permalink":"/blog/tags/personal"},{"label":"random","permalink":"/blog/tags/random"}],"readingTime":1.735,"hasTruncateMarker":true,"authors":[{"name":"Sahil Satishkumar","url":"https://sahilsatishkumar.dev/contact","imageURL":"https://avatars1.githubusercontent.com/u/8242514"}],"frontMatter":{"slug":"2024","title":"Welcome 2024!","description":"Revive Blog.","author":"Sahil Satishkumar","author_url":"https://sahilsatishkumar.dev/contact","author_image_url":"https://avatars1.githubusercontent.com/u/8242514","tags":["personal","random"]},"unlisted":false,"prevItem":{"title":"A comprehensive guide on Promise polyfills","permalink":"/blog/promises-polyfill"},"nextItem":{"title":"npm \ud83d\udce6 React OpenTable","permalink":"/blog/2020/08/21/react-opentable"}},"content":"```jsx\\n</2023>\\n <2024>\\n```\\n\\nHappy New Year! \\n\\n\x3c!-- truncate --\x3e\\n\\nThis Was been abandoned for a good 3.5 years. It took quite an effort to get this up and running. I was on Docusaurus `v2.0`, decided to upgrade to `v3.0`. Broke the commenting feature in the process. I haven\'t touched a docusaurus based project for a very long time. I just realised retrospectively, that I created this space for me when I was between jobs back in mid 2020, and I am doing the same in late 2023!\\n\\nSo what happened between Aug 2020 and now? Well, a lot. I cannot share the entirety of it, but here\'s the gist. \\n\\n1. Got my final degree certificate. (Was supposed to graduate in 2016, graduated in Jan 2020, got the certificate later that year)\\n2. Read about 100+ books. (Check out the [recommended section](/books#recommended) for my top picks)\\n3. Worked at a series B startup (in the location tracking like space, again), learnt a lot under a very supportive manager. Got promoted (first time in my career).\\n4. Got hooked on to the [`Second Brain`](https://maggieappleton.com/basb) culture, and OKRs.\\n5. Worked at a late stage company\'s platform team (superapp based out of Indonesia), survived 2 different rounds of layoffs and calls for RTO.\\n\\n...And a lot more things.\\n\\n:::note P.S.\\n\\nI am on the look out for my next role. I am looking for something long term at a place with good IC path. I\'d prefer to work in the enterprise software space, but any role in a challenging domain would also be a good fit. [Reach out](/contact) to me over mail to take this further.\\n:::\\n\\nWhat to look for from this space?\\n\\nAs mentioned in my very first blog post, I cannot make any promises, but let me try to do this once in a month. I have a bunch of ideas on where I want to take this. I read a enough technical & non-fictional books to publish my own notes on them, tech interview culture, personal productivity, obsidian-based PKM and a lots more.\\n\\nUntil next time."},{"id":"/2020/08/21/react-opentable","metadata":{"permalink":"/blog/2020/08/21/react-opentable","source":"@site/blog/2020-08-21-react-opentable.md","title":"npm \ud83d\udce6 React OpenTable","description":"React wrapper for Opentable Reservation Widget","date":"2020-08-21T00:00:00.000Z","formattedDate":"August 21, 2020","tags":[{"label":"opentable","permalink":"/blog/tags/opentable"},{"label":"react-opentable","permalink":"/blog/tags/react-opentable"},{"label":"react-opentable wrapper","permalink":"/blog/tags/react-opentable-wrapper"}],"readingTime":1.69,"hasTruncateMarker":true,"authors":[{"name":"Sahil Satishkumar","url":"https://sahilsatishkumar.dev/contact","imageURL":"https://avatars1.githubusercontent.com/u/8242514"}],"frontMatter":{"title":"npm \ud83d\udce6 React OpenTable","description":"React wrapper for Opentable Reservation Widget","author":"Sahil Satishkumar","author_url":"https://sahilsatishkumar.dev/contact","author_image_url":"https://avatars1.githubusercontent.com/u/8242514","tags":["opentable","react-opentable","react-opentable wrapper"]},"unlisted":false,"prevItem":{"title":"Welcome 2024!","permalink":"/blog/2024"},"nextItem":{"title":"Soft Skills","permalink":"/blog/2020/08/16/Soft-skills"}},"content":"I published my very first npm package: [`react-opentable (v2.0.0)`](https://www.npmjs.com/package/react-opentable)\\n\\n![](https://badgen.net/npm/v/react-opentable) ![](https://badgen.net/npm/dt/react-opentable) ![](https://badgen.net/bundlephobia/minzip/react-opentable) ![](https://badgen.net/npm/license/react-opentable)\\n\\nThis post intends to be a helper document for the same, and will be kept upto date, if the package ever changes. As of writing this post, v2.0.0 is the latest and stable version of the package. The source code is in a private repository right now, will be open sourced soon!\\n\\n\x3c!--truncate--\x3e\\n\\n`react-opentable` is a React wrapper for opentable\'s reservation widget.\\n\\n:::info\\n\\nDISCLAIMER: **`react-opentable`** is not affiliated to **`Opentable Inc.,`** or it\'s employees.\\n\\n:::\\n\\n### Requirements\\n\\nWorks only with [React v16.8](https://reactjs.org/blog/2019/02/06/react-v16.8.0.html) and above.\\n\\n`react-opentable` uses hooks and will not work with previous versions (comment below if you need one)\\n\\n### Exports\\n\\nThere are two main exports from `react-opentable`\\n\\n- `OpenTable` React Component\\n- `positions` JS Object\\n\\n### Usage\\n\\n```jsx OpenTable Component\\n<OpenTable rid=\\"123123\\" />\\n```\\n\\n:::info\\n\\n**`rid`** is a required prop, the component won\'t function correctly without it.\\n\\n:::\\n\\nDefault Props:\\n\\n| defaultProps           | description                                  |\\n| ---------------------- | -------------------------------------------- |\\n| type=\'standard\'        | Uses the standard widget type                |\\n| theme=\'standard\'       | Default standard theme                       |\\n| iframe=true            | opens the widget in an iframe (recommended)  |\\n| newtab=false           | widget won\'t open reservation in a new tab   |\\n| position=\'bottom-left\' | widget opens in the `\'bottom-left\'` position |\\n\\n### Customization\\n\\nThe widget can be positioned in one of 5 positions namely \'top-left\', \'top-right\' ,\'bottom-left\' (default), \'bottom-right\' and \'unset\' (if you want to position the element through css, use this).\\n\\nTo avoid typos you can use the `positions` object with keys `positions.POSITION_TOP_LEFT`, `positions.POSITION_TOP_RIGHT`, `positions.POSITION_BOTTOM_LEFT`, `positions.POSITION_BOTTOM_RIGHT` and `positions.POSITION_UNSET`\\n\\nFor further customisations, pass `customClassName`, this className gets attached to the container of component.\\n\\n### Demo\\n\\nHere\'s a code sandbox for you to tinker with:\\n\\n<iframe src=\\"https://codesandbox.io/embed/unruffled-snow-0zmiw?fontsize=14&hidenavigation=1&theme=light\\" style={{width: \'100%\', height: \'500px\', border: 0, borderRadius: \'4px\', overflow: \'hidden\'}} title=\\"unruffled-snow-0zmiw\\" allow=\\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\\" sandbox=\\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\\" />\\n\\n### Need feedback\\n\\nDo let me know how can I make this components more useful for you :grin:"},{"id":"/2020/08/16/Soft-skills","metadata":{"permalink":"/blog/2020/08/16/Soft-skills","source":"@site/blog/2020-08-16-Soft-skills.md","title":"Soft Skills","description":"...This book is really about me sharing my experience and the things that have made me successful so far in my life...","date":"2020-08-16T00:00:00.000Z","formattedDate":"August 16, 2020","tags":[{"label":"books","permalink":"/blog/tags/books"},{"label":"review","permalink":"/blog/tags/review"}],"readingTime":2.545,"hasTruncateMarker":true,"authors":[{"name":"Sahil Satishkumar","url":"https://sahilsatishkumar.dev/contact","imageURL":"https://avatars1.githubusercontent.com/u/8242514"}],"frontMatter":{"title":"Soft Skills","author":"Sahil Satishkumar","author_url":"https://sahilsatishkumar.dev/contact","author_image_url":"https://avatars1.githubusercontent.com/u/8242514","tags":["books","review"]},"unlisted":false,"prevItem":{"title":"npm \ud83d\udce6 React OpenTable","permalink":"/blog/2020/08/21/react-opentable"},"nextItem":{"title":"Hello World","permalink":"/blog/hello-world"}},"content":"<blockquote>\\n...This book is really about me sharing my experience and the things that have made me successful so far in my life...\\n\\n<br/><br/>\\n\\n_(Chapter #71, Soft Skills)_\\n\\n</blockquote>\\n\\n<div style={{display: \\"flex\\", flexDirection: \\"column\\", alignItems: \\"center\\"}}>\\n<a href=\\"https://www.amazon.in/gp/product/B079WY7ZJK/ref=as_li_ss_il?ie=UTF8&linkCode=li3&tag=sahrckr07-21&linkId=fd638e65c93e9c0c646cea96f7b7e92b\\" target=\\"_blank\\">Soft Skills: The Software Developer\'s Life Manual</a>\\n<img border=\\"0\\" width=\\"240\\" src=\\"https://images.manning.com/360/480/resize/book/0/54e56db-260b-46a7-b15d-ad4dfa39a867/sonmez.png\\" />\\n<img src=\\"https://ir-in.amazon-adsystem.com/e/ir?t=sahrckr07-21&l=li3&o=31&a=B079WY7ZJK\\" width=\\"1\\" height=\\"1\\" border=\\"0\\" alt=\\"\\" />\\n</div>\\n\\n\x3c!--truncate--\x3e\\n\\n## TLDR;\\n\\nThe book is written with great intention. It covers a lot of topics normally not normally talked about in the software industry.\\n\\nShould you read it ? The answer depends on the kind of books you\'ve read in the past. If you have read a lot of non-fiction & self-help in the past, you should probably skip it.\\n\\nOn the other hand if you are a software developer & new to reading books in general. This might just be the perfect one for you.\\n\\n## The long version\\n\\nThe book is cleverly structured into 7 parts. There are 71 chapters, this will take a while for you to parse through. Each chapter is bite sized 1500-ish words, and are mostly unrelated. You should be able to pick it up, even if you decide to drop it off in between.\\n\\n1. Career\\n2. Marketing yourself\\n3. Learning\\n4. Productivity\\n5. Financial\\n6. Fitness\\n7. Spirit\\n\\nWhile the book starts with a very relatable content, but doesn\'t do a great job at keeping it relatable.\\n\\nA lot of the content which isn\'t about self development, will not apply to most of us. What works for a certain person, in a certain country might not work in every geography. I personally didn\'t like most of section 5 & section 6.\\n\\nIt would have added a lot of value if this book was written by a diverse bunch of authors, instead of, just John broadcasting his (legit) experiences & opinion.\\n\\nLet\'s pick a topic for example. John has made most of his income from real-estate. Let\'s assume that an average home costs like 2x - 3x the annual income of a software engineer with some years of experience, in a non major city. However, in a country like India cost of real-estate would be atleast 5x the annual income, if not more, than what a software engineer makes. And don\'t get me started on availability of homeloans (Interest rates have lower now, but the principal amount is not going down any time soon).\\n\\nOn the bright side of things, if this is your first book. You\'ll get some sort of a summary from a lot of other books.\\n\\n- [So Good They Can\'t Ignore You](https://amzn.to/3aBWbLu)\\n- [The Power of Habit](https://amzn.to/3g2Jc6y)\\n- [The Dip: The extraordinary benefits of knowing when to quit](https://amzn.to/3g0dBCr)  \\n  _(John does a better job of summarising this in 1 chapter, dragging the topic into a book.)_\\n\\n(I\'ve read only the aforementioned books, John does mention a bunch of books that I\'ve added to my reading queue)\\n\\n<blockquote>\\n\\nYou shouldn\'t take what anyone says as gospel...\\n\\n_(Chapter #71, Soft Skills)_\\n\\n</blockquote>\\n\\nP.S.: I may be \\"Marketing Myself\\" by reviving my blog."},{"id":"hello-world","metadata":{"permalink":"/blog/hello-world","source":"@site/blog/2020-04-26-hello-world.md","title":"Hello World","description":"Welcome to this blog.","date":"2020-04-26T00:00:00.000Z","formattedDate":"April 26, 2020","tags":[{"label":"books","permalink":"/blog/tags/books"},{"label":"random","permalink":"/blog/tags/random"}],"readingTime":1.49,"hasTruncateMarker":true,"authors":[{"name":"Sahil Satishkumar","url":"https://sahilsatishkumar.dev/contact","imageURL":"https://avatars1.githubusercontent.com/u/8242514"}],"frontMatter":{"slug":"hello-world","title":"Hello World","author":"Sahil Satishkumar","author_url":"https://sahilsatishkumar.dev/contact","author_image_url":"https://avatars1.githubusercontent.com/u/8242514","tags":["books","random"]},"unlisted":false,"prevItem":{"title":"Soft Skills","permalink":"/blog/2020/08/16/Soft-skills"}},"content":"Welcome to this blog.\\n\\n\x3c!--truncate--\x3e\\n\\nThis is not a test post.\\n\\nI recently made this transition to my website from being a static site to something more. I wanted a place where I could log my thoughts, talk about books that I\'m reading (been reading a lot lately) and code I want to share openly.\\n\\nThere are a lot of changes I really love about this setup. Firstly, I got to hack an off-the-shelf [tool](https://docusaurus.io/) to build it (doing that for the second time). Secondly, I am really thrilled to get my own [books page](/books). Goodreads as a social media is cool, but then there aren\'t a lot of people using it. This blog will also give me a way to share my on views on some of the books I really enjoyed reading them.\\n\\nLastly docusaurus is great for sharing programming experiences too. \ud83d\ude42\\n\\n```js\\nconsole.log(\\"LOVE THEM CODEBLOCKS!\\");\\n```\\n\\nHow can you help ?\\n\\n- I am a really clumsy at typing. So please let me know if there are tpyos. (Better off, send PR\'s!)\\n- I intend to add more posts/tutorials on a periodical basis. (Atleast once in a month, no promises but will definitely give it a try) SEND SUGGESTIONS.\\n\\nI do not have a Long Term plan as of now. Personally, I am dealing with a lot of changes, and I cannot commit to a lot at the moment. But here are some of the things I want to fix sooner than later.\\n\\n- ~[ ] Fix landing page, get a roadmap for the same~\\n- ~[ ] Figure out a way to add comments to posts~\\n- ~[ ] Plan next 3 posts (2 technical, 1 book review maybe?)~\\n- ~[ ] Add github action to deploy on push to master~\\n\\nCiao \ud83d\udc4b"}]}')}}]);